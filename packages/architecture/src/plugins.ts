import type { CorePluginId, OptionalPluginId, Plugin, PluginId } from "./types";

/* TODO: review data and add which plugins depend on each other */

/**
 * 'analytics' plugin in 'layout.tsx' should be wrapped in a provider and optional
 * 'auth', 'blog' and 'waitlist' in 'middleware.ts', they should be optional
 * 'blog' in 'footer.tsx' and 'auth' in 'header.tsx' which is 'components' but should be optional
 * 'auth' in 'client.ts' and 'handlers.ts' in 'errors' that should be optional
 * 'analytics' and 'api' in 'providers.plugin.ts' in 'plugins', they should be optional
 */

export const CorePluginIds = {
  api: "api",
  components: "components",
  crypto: "crypto",
  env: "env",
  errors: "errors",
  plugins: "plugins",
} as const;

export const OptionalPluginIds = {
  ai: "ai",
  analytics: "analytics",
  auth: "auth",
  blog: "blog",
  db: "db",
  docker: "docker",
  feedbacks: "feedbacks",
  flags: "flags",
  landing: "landing",
  legal: "legal",
  mails: "mails",
  markdown: "markdown",
  "package-json-scripts": "package-json-scripts",
  payments: "payments",
  pwa: "pwa",
  seo: "seo",
  sidebar: "sidebar",
  waitlist: "waitlist",
} as const;

export const corePlugins: Record<CorePluginId, Plugin> = {
  api: {
    id: "api",
    label: "API",
    description: "Typed RPC API using oRPC.",
    dependencies: [
      "@orpc/client",
      "@orpc/react-query",
      "@orpc/server",
      "@tanstack/react-query",
      "@tanstack/react-query-devtools",
      "client-only",
      "dotenv",
      "nuqs",
      "server-only",
      "zod",
    ],
    devDependencies: [],
    coreRequiredPlugins: ["errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  components: {
    id: "components",
    label: "Components",
    description: "Extra UI hooks and utilities for shadcn/ui.",
    dependencies: [
      "@hookform/resolvers",
      "class-variance-authority",
      "clsx",
      "cmdk",
      "date-fns",
      "embla-carousel-react",
      "input-otp",
      "lucide-react",
      "motion",
      "next-themes",
      "radix-ui",
      "react-day-picker",
      "react-hook-form",
      "react-resizable-panels",
      "recharts",
      "sonner",
      "tailwind-merge",
      "tailwindcss-animate",
      "vaul",
      "zustand",
    ],
    devDependencies: [],
    coreRequiredPlugins: [],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  crypto: {
    id: "crypto",
    label: "Crypto",
    description: "Cryptographic helpers and utilities.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: ["env"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  env: {
    id: "env",
    label: "Environment",
    description: "Environment management via dotenv.",
    dependencies: ["dotenv"],
    devDependencies: [],
    coreRequiredPlugins: [],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  errors: {
    id: "errors",
    label: "Error Handling",
    description: "Error boundary & toast system.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: ["env"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  plugins: {
    id: "plugins",
    label: "Plugins",
    description: "Zap.ts plugin system bootstrap.",
    dependencies: [],
    devDependencies: ["ultracite"],
    coreRequiredPlugins: [],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
};

export const optionalPlugins: Record<OptionalPluginId, Plugin> = {
  ai: {
    id: "ai",
    label: "AI",
    description: "Integrates AI SDKs such as OpenAI and Mistral.",
    dependencies: ["@ai-sdk/openai", "@ai-sdk/mistral", "@ai-sdk/react", "ai"],
    devDependencies: [],
    coreRequiredPlugins: ["api", "components", "crypto", "errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  analytics: {
    id: "analytics",
    label: "Analytics",
    description: "Adds analytics providers like Vercel, PostHog, etc.",
    dependencies: [
      "@vercel/analytics",
      "@vercel/speed-insights",
      "posthog-js",
      "posthog-node",
    ],
    devDependencies: [],
    coreRequiredPlugins: ["env"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  auth: {
    id: "auth",
    label: "Authentication",
    description: "Authentication with Better Auth.",
    dependencies: ["better-auth"],
    devDependencies: [],
    coreRequiredPlugins: ["api", "components", "env", "errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  blog: {
    id: "blog",
    label: "Blog",
    description: "Static/dynamic blog with MDX support.",
    dependencies: ["schema-dts", "serialize-javascript"],
    devDependencies: [],
    coreRequiredPlugins: ["components", "errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  db: {
    id: "db",
    label: "Database",
    description: "Database integration via Drizzle ORM & PostgreSQL.",
    dependencies: ["@neondatabase/serverless", "drizzle-orm", "pg"],
    devDependencies: ["drizzle-kit"],
    coreRequiredPlugins: ["env"],
    requiredPlugins: [],
    packageJsonScripts: [
      "db:check",
      "dev:db:check",
      "db:export",
      "dev:db:export",
      "db:generate",
      "dev:db:generate",
      "db:migrate",
      "dev:db:migrate",
      "db:pull",
      "dev:db:pull",
      "db:push",
      "dev:db:push",
      "db:studio",
      "dev:db:studio",
      "db:up",
      "dev:db:up",
    ],
  },
  docker: {
    id: "docker",
    label: "Docker",
    description: "Containerization support with Docker.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: [],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  feedbacks: {
    id: "feedbacks",
    label: "Feedback",
    description: "Collect feedback from users.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: ["api", "components", "errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  flags: {
    id: "flags",
    label: "Feature Flags",
    description: "Feature flagging with Flags SDK + PostHog.",
    dependencies: ["@flags-sdk/posthog", "flags"],
    devDependencies: [],
    coreRequiredPlugins: ["api", "env"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  landing: {
    id: "landing",
    label: "Landing",
    description: "Public landing page template.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: ["components"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  legal: {
    id: "legal",
    label: "Legal",
    description: "Cookie, privacy, terms of service pages.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: ["components"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  mails: {
    id: "mails",
    label: "Emails",
    description: "Email templates with React Email & Resend.",
    dependencies: ["@react-email/components", "react-email", "resend"],
    devDependencies: ["@react-email/preview-server"],
    coreRequiredPlugins: ["api", "env", "errors"],
    requiredPlugins: [],
    packageJsonScripts: ["dev:mail"],
  },
  markdown: {
    id: "markdown",
    label: "Markdown",
    description: "Markdown rendering with syntax highlighting.",
    dependencies: [
      "@mdx-js/loader",
      "@mdx-js/react",
      "next-mdx-remote",
      "gray-matter",
      "react-syntax-highlighter",
    ],
    devDependencies: ["@types/mdx"],
    coreRequiredPlugins: [],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  "package-json-scripts": {
    id: "package-json-scripts",
    label: "Package JSON Scripts",
    description: "Additional scripts for package.json.",
    dependencies: ["@next/bundle-analyzer"],
    devDependencies: ["cross-env", "react-scan"],
    coreRequiredPlugins: [],
    requiredPlugins: [],
    packageJsonScripts: ["build:analyze", "dev:debug", "dev:scan", "dev:trace"],
  },
  payments: {
    id: "payments",
    label: "Payments",
    description: "Billing & payments with Polar SDK.",
    dependencies: ["@polar-sh/better-auth", "@polar-sh/sdk"],
    devDependencies: [],
    coreRequiredPlugins: ["api", "components", "env", "errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  pwa: {
    id: "pwa",
    label: "Progressive Web App",
    description: "Service worker, manifest, push notifications.",
    dependencies: ["web-push"],
    devDependencies: [],
    coreRequiredPlugins: ["api", "env", "errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  seo: {
    id: "seo",
    label: "SEO",
    description: "Search engine optimization with metadata and sitemap.",
    dependencies: ["next-sitemap"],
    devDependencies: [],
    coreRequiredPlugins: [],
    requiredPlugins: [],
    packageJsonScripts: ["postbuild"],
  },
  sidebar: {
    id: "sidebar",
    label: "Sidebar Layout",
    description: "Authenticated app layout with sidebar.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: ["errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
  waitlist: {
    id: "waitlist",
    label: "Waitlist",
    description: "Waitlist page + middleware integration.",
    dependencies: [],
    devDependencies: [],
    coreRequiredPlugins: ["api", "components", "errors"],
    requiredPlugins: [],
    packageJsonScripts: [],
  },
};

export const plugins: Record<PluginId, Plugin> = {
  ...corePlugins,
  ...optionalPlugins,
};
